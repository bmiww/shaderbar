    /// Execute an arbitrary closure with the OpenGL context active and mutable access to
    /// glium's internal state. Useful if another component needs to directly manipulate
    /// OpenGL state or if another component already has.
    ///
    /// **`action` takes full responsibility for keeping OpenGL state in sync with the
    /// context's state.**
    #[inline]
    pub unsafe fn exec_with_context<'a, T, F>(&self, action: F) -> T
    where
        T: Send + 'static,
        F: FnOnce(&mut CommandContext<'_>) -> T + 'a,
    {
        let mut ctxt = self.make_current();
        action(&mut ctxt)
    }

    /// Asserts that there are no OpenGL errors pending.
    ///
    /// This function should be used in tests.
    pub fn assert_no_error(&self, user_msg: Option<&str>) {
        let mut ctxt = self.make_current();

        match (crate::get_gl_error(&mut ctxt), user_msg) {
            (Some(msg), None) => panic!("{}", msg),
            (Some(msg), Some(user_msg)) => panic!("{} : {}", user_msg, msg),
            (None, _) => ()
        };
    }