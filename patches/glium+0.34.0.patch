diff --git a/src/context/mod.rs b/src/context/mod.rs
index 294f492..8b4427a 100644
--- a/src/context/mod.rs
+++ b/src/context/mod.rs
@@ -2,28 +2,28 @@
 
 use crate::gl;
 
-use std::borrow::Cow;
-use std::cell::{Cell, RefCell, RefMut};
 use std::collections::HashMap;
-use std::ffi::CStr;
-use std::hash::BuildHasherDefault;
-use std::marker::PhantomData;
 use std::mem;
-use std::os::raw;
 use std::ptr;
-use std::rc::Rc;
 use std::str;
+use std::borrow::Cow;
+use std::cell::{Cell, RefCell, RefMut};
+use std::marker::PhantomData;
+use std::ffi::CStr;
+use std::rc::Rc;
+use std::os::raw;
+use std::hash::BuildHasherDefault;
 
 use fnv::FnvHasher;
 
+use crate::IncompatibleOpenGl;
+use crate::SwapBuffersError;
+use crate::CapabilitiesSource;
+use crate::ContextExt;
 use crate::backend::Backend;
 use crate::version;
 use crate::version::Api;
 use crate::version::Version;
-use crate::CapabilitiesSource;
-use crate::ContextExt;
-use crate::IncompatibleOpenGl;
-use crate::SwapBuffersError;
 
 use crate::debug;
 use crate::fbo;
@@ -33,7 +33,7 @@ use crate::texture;
 use crate::uniforms;
 use crate::vertex_array_object;
 
-pub use self::capabilities::{Capabilities, Profile, ReleaseBehavior};
+pub use self::capabilities::{ReleaseBehavior, Capabilities, Profile};
 pub use self::extensions::ExtensionsList;
 pub use self::state::GlState;
 pub use self::uuid::UuidError;
@@ -88,13 +88,7 @@ pub struct Context {
     vertex_array_objects: vertex_array_object::VertexAttributesSystem,
 
     /// We maintain a list of samplers for each possible behavior.
-    samplers: RefCell<
-        HashMap<
-            uniforms::SamplerBehavior,
-            sampler_object::SamplerObject,
-            BuildHasherDefault<FnvHasher>,
-        >,
-    >,
+    samplers: RefCell<HashMap<uniforms::SamplerBehavior, sampler_object::SamplerObject, BuildHasherDefault<FnvHasher>>>,
 
     /// List of texture handles that are resident. We need to call `MakeTextureHandleResidentARB`
     /// when rebuilding the context.
@@ -134,14 +128,7 @@ pub struct CommandContext<'a> {
     pub framebuffer_objects: &'a fbo::FramebuffersContainer,
 
     /// The list of samplers.
-    pub samplers: RefMut<
-        'a,
-        HashMap<
-            uniforms::SamplerBehavior,
-            sampler_object::SamplerObject,
-            BuildHasherDefault<FnvHasher>,
-        >,
-    >,
+    pub samplers: RefMut<'a, HashMap<uniforms::SamplerBehavior, sampler_object::SamplerObject, BuildHasherDefault<FnvHasher>>>,
 
     /// List of texture handles that need to be made resident.
     pub resident_texture_handles: RefMut<'a, Vec<gl::types::GLuint64>>,
@@ -173,8 +160,7 @@ impl Context {
         check_current_context: bool,
         callback_behavior: DebugCallbackBehavior,
     ) -> Result<Rc<Context>, IncompatibleOpenGl>
-    where
-        B: Backend + 'static,
+        where B: Backend + 'static
     {
         backend.make_current();
 
@@ -200,18 +186,15 @@ impl Context {
 
         let (debug_callback, synchronous) = match callback_behavior {
             DebugCallbackBehavior::Ignore => (None, false),
-            DebugCallbackBehavior::DebugMessageOnError => (
-                Some(Box::new(default_debug_callback) as debug::DebugCallback),
-                true,
-            ),
-            DebugCallbackBehavior::PrintAll => (
-                Some(Box::new(printall_debug_callback) as debug::DebugCallback),
-                false,
-            ),
-            DebugCallbackBehavior::Custom {
-                callback,
-                synchronous,
-            } => (Some(callback), synchronous),
+            DebugCallbackBehavior::DebugMessageOnError => {
+                (Some(Box::new(default_debug_callback) as debug::DebugCallback), true)
+            },
+            DebugCallbackBehavior::PrintAll => {
+                (Some(Box::new(printall_debug_callback) as debug::DebugCallback), false)
+            },
+            DebugCallbackBehavior::Custom { callback, synchronous } => {
+                (Some(callback), synchronous)
+            },
         };
 
         let context = Rc::new(Context {
@@ -239,14 +222,12 @@ impl Context {
         {
             let mut ctxt = context.make_current();
             if crate::get_gl_error(&mut ctxt).is_some() {
-                eprintln!(
-                    "glium has triggered an OpenGL error during initialization. Please report \
-                           this error: https://github.com/glium/glium/issues"
-                );
+                eprintln!("glium has triggered an OpenGL error during initialization. Please report \
+                           this error: https://github.com/glium/glium/issues");
             }
             /*assert!(::get_gl_error(&mut ctxt).is_none(),
-            "glium has triggered an OpenGL error during initialization. Please report \
-             this error: https://github.com/glium/glium/issues");*/
+                    "glium has triggered an OpenGL error during initialization. Please report \
+                     this error: https://github.com/glium/glium/issues");*/
             if ctxt.version >= &Version(Api::Gl, 3, 2) && ctxt.extensions.gl_arb_seamless_cube_map {
                 ctxt.gl.Enable(gl::TEXTURE_CUBE_MAP_SEAMLESS);
             }
@@ -265,8 +246,7 @@ impl Context {
     ///
     /// The new context **must** have lists shared with the old one.
     pub unsafe fn rebuild<B>(&self, new_backend: B) -> Result<(), IncompatibleOpenGl>
-    where
-        B: Backend + 'static,
+        where B: Backend + 'static
     {
         // framebuffer objects and vertex array objects aren't shared,
         // so we have to destroy them
@@ -310,23 +290,18 @@ impl Context {
         if self.state.borrow().draw_framebuffer != 0 || self.state.borrow().read_framebuffer != 0 {
             let mut ctxt = self.make_current();
 
-            if ctxt.version >= &Version(Api::Gl, 3, 0) || ctxt.extensions.gl_arb_framebuffer_object
+            if ctxt.version >= &Version(Api::Gl, 3, 0) ||
+               ctxt.extensions.gl_arb_framebuffer_object
             {
-                unsafe {
-                    ctxt.gl.BindFramebuffer(gl::FRAMEBUFFER, 0);
-                }
+                unsafe { ctxt.gl.BindFramebuffer(gl::FRAMEBUFFER, 0); }
                 ctxt.state.draw_framebuffer = 0;
                 ctxt.state.read_framebuffer = 0;
             } else if ctxt.version >= &Version(Api::GlEs, 2, 0) {
-                unsafe {
-                    ctxt.gl.BindFramebuffer(gl::FRAMEBUFFER, 0);
-                }
+                unsafe { ctxt.gl.BindFramebuffer(gl::FRAMEBUFFER, 0); }
                 ctxt.state.draw_framebuffer = 0;
                 ctxt.state.read_framebuffer = 0;
             } else if ctxt.extensions.gl_ext_framebuffer_object {
-                unsafe {
-                    ctxt.gl.BindFramebufferEXT(gl::FRAMEBUFFER_EXT, 0);
-                }
+                unsafe { ctxt.gl.BindFramebufferEXT(gl::FRAMEBUFFER_EXT, 0); }
                 ctxt.state.draw_framebuffer = 0;
                 ctxt.state.read_framebuffer = 0;
             } else {
@@ -369,10 +344,7 @@ impl Context {
     /// Returns true if the given GLSL version is supported.
     #[inline]
     pub fn is_glsl_version_supported(&self, version: &Version) -> bool {
-        self.capabilities()
-            .supported_glsl_versions
-            .iter()
-            .any(|v| v == version)
+        self.capabilities().supported_glsl_versions.iter().any(|v| v == version)
     }
 
     /// Returns a string containing this GL version or release number used by this context.
@@ -449,9 +421,9 @@ impl Context {
 
         let mut ctxt = self.make_current();
 
-        let lost = if ctxt.version >= &Version(Api::Gl, 4, 5)
-            || ctxt.version >= &Version(Api::GlEs, 3, 2)
-            || ctxt.extensions.gl_khr_robustness
+        let lost = if ctxt.version >= &Version(Api::Gl, 4, 5) ||
+                      ctxt.version >= &Version(Api::GlEs, 3, 2) ||
+                      ctxt.extensions.gl_khr_robustness
         {
             unsafe { ctxt.gl.GetGraphicsResetStatus() != gl::NO_ERROR }
         } else if ctxt.extensions.gl_ext_robustness {
@@ -462,9 +434,7 @@ impl Context {
             false
         };
 
-        if lost {
-            ctxt.state.lost_context = true;
-        }
+        if lost { ctxt.state.lost_context = true; }
         lost
     }
 
@@ -481,9 +451,7 @@ impl Context {
     /// if the hardware doesn't support it.
     #[inline]
     pub fn get_max_anisotropy_support(&self) -> Option<u16> {
-        self.capabilities()
-            .max_texture_max_anisotropy
-            .map(|v| v as u16)
+        self.capabilities().max_texture_max_anisotropy.map(|v| v as u16)
     }
 
     /// Returns the maximum dimensions of the viewport.
@@ -502,10 +470,8 @@ impl Context {
         unsafe {
             let ctxt = self.make_current();
 
-            if (ctxt.version >= &Version(Api::GlEs, 2, 0)
-                || ctxt.version >= &Version(Api::Gl, 4, 1))
-                && !ctxt.capabilities.supported_glsl_versions.is_empty()
-            {
+            if (ctxt.version >= &Version(Api::GlEs, 2, 0) ||
+                ctxt.version >= &Version(Api::Gl, 4, 1)) && !ctxt.capabilities.supported_glsl_versions.is_empty() {
                 ctxt.gl.ReleaseShaderCompiler();
             }
         }
@@ -521,15 +487,14 @@ impl Context {
             let mut value: [gl::types::GLint; 4] = [0; 4];
 
             if ctxt.extensions.gl_nvx_gpu_memory_info {
-                ctxt.gl.GetIntegerv(
-                    gl::GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX,
-                    &mut value[0],
-                );
+                ctxt.gl.GetIntegerv(gl::GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX,
+                               &mut value[0]);
                 Some(value[0] as usize * 1024)
+
             } else if ctxt.extensions.gl_ati_meminfo {
-                ctxt.gl
-                    .GetIntegerv(gl::TEXTURE_FREE_MEMORY_ATI, &mut value[0]);
+                ctxt.gl.GetIntegerv(gl::TEXTURE_FREE_MEMORY_ATI, &mut value[0]);
                 Some(value[0] as usize * 1024)
+
             } else {
                 None
             }
@@ -551,26 +516,15 @@ impl Context {
     /// # }
     /// ```
     pub fn read_front_buffer<T>(&self) -> Result<T, ops::ReadError>
-    where
-        T: texture::Texture2dDataSink<(u8, u8, u8, u8)>,
+        where T: texture::Texture2dDataSink<(u8, u8, u8, u8)>
     {
         let mut ctxt = self.make_current();
         let dimensions = self.get_framebuffer_dimensions();
-        let rect = crate::Rect {
-            left: 0,
-            bottom: 0,
-            width: dimensions.0,
-            height: dimensions.1,
-        };
+        let rect = crate::Rect { left: 0, bottom: 0, width: dimensions.0, height: dimensions.1 };
 
         let mut data = Vec::with_capacity(0);
-        ops::read(
-            &mut ctxt,
-            ops::Source::DefaultFramebuffer(gl::FRONT_LEFT),
-            &rect,
-            &mut data,
-            false,
-        )?;
+        ops::read(&mut ctxt, ops::Source::DefaultFramebuffer(gl::FRONT_LEFT), &rect,
+                          &mut data, false)?;
         Ok(T::from_raw(Cow::Owned(data), dimensions.0, dimensions.1))
     }
 
@@ -581,14 +535,41 @@ impl Context {
     /// completes.**
     #[inline]
     pub unsafe fn exec_in_context<'a, T, F>(&self, action: F) -> T
-    where
-        T: Send + 'static,
-        F: FnOnce() -> T + 'a,
+                                            where T: Send + 'static,
+                                            F: FnOnce() -> T + 'a
     {
         let _ctxt = self.make_current();
         action()
     }
 
+    #[inline]
+    pub unsafe fn rebind_textures(&self) {
+        self.exec_with_context(|c| {
+            c.state
+                .texture_units
+                .iter_mut()
+                .for_each(|t| *t = Default::default());
+
+            c.gl.ActiveTexture(crate::gl::TEXTURE0 + c.state.active_texture);
+        });
+    }
+
+    /// Execute an arbitrary closure with the OpenGL context active and mutable access to
+    /// glium's internal state. Useful if another component needs to directly manipulate
+    /// OpenGL state or if another component already has.
+    ///
+    /// **`action` takes full responsibility for keeping OpenGL state in sync with the
+    /// context's state.**
+    #[inline]
+    pub unsafe fn exec_with_context<'a, T, F>(&self, action: F) -> T
+    where
+        T: Send + 'static,
+        F: FnOnce(&mut CommandContext<'_>) -> T + 'a,
+    {
+        let mut ctxt = self.make_current();
+        action(&mut ctxt)
+    }
+
     /// Asserts that there are no OpenGL errors pending.
     ///
     /// This function should be used in tests.
@@ -598,7 +579,7 @@ impl Context {
         match (crate::get_gl_error(&mut ctxt), user_msg) {
             (Some(msg), None) => panic!("{}", msg),
             (Some(msg), Some(user_msg)) => panic!("{} : {}", user_msg, msg),
-            (None, _) => (),
+            (None, _) => ()
         };
     }
 
@@ -619,9 +600,7 @@ impl Context {
     #[inline]
     pub fn finish(&self) {
         let ctxt = self.make_current();
-        unsafe {
-            ctxt.gl.Finish();
-        }
+        unsafe { ctxt.gl.Finish(); }
     }
 
     /// Calls `glFlush()`. This starts executing the commands that you have issued if it is not
@@ -636,9 +615,7 @@ impl Context {
     #[inline]
     pub fn flush(&self) {
         let ctxt = self.make_current();
-        unsafe {
-            ctxt.gl.Flush();
-        }
+        unsafe { ctxt.gl.Flush(); }
     }
 
     /// Inserts a debugging string in the commands queue. If you use an OpenGL debugger, you will
@@ -653,22 +630,16 @@ impl Context {
 
         if ctxt.extensions.gl_gremedy_string_marker {
             let marker = marker.as_bytes();
-            unsafe {
-                ctxt.gl.StringMarkerGREMEDY(
-                    marker.len() as gl::types::GLsizei,
-                    marker.as_ptr() as *const _,
-                )
-            };
+            unsafe { ctxt.gl.StringMarkerGREMEDY(marker.len() as gl::types::GLsizei,
+                                                 marker.as_ptr() as *const _) };
             Ok(())
+
         } else if ctxt.extensions.gl_ext_debug_marker {
             let marker = marker.as_bytes();
-            unsafe {
-                ctxt.gl.InsertEventMarkerEXT(
-                    marker.len() as gl::types::GLsizei,
-                    marker.as_ptr() as *const _,
-                )
-            };
+            unsafe { ctxt.gl.InsertEventMarkerEXT(marker.len() as gl::types::GLsizei,
+                                                  marker.as_ptr() as *const _) };
             Ok(())
+
         } else {
             Err(())
         }
@@ -770,19 +741,17 @@ impl Drop for Context {
             fbo::FramebuffersContainer::cleanup(&mut ctxt);
             vertex_array_object::VertexAttributesSystem::cleanup(&mut ctxt);
 
-            for (_, s) in mem::replace(
-                &mut *ctxt.samplers,
-                HashMap::with_hasher(Default::default()),
-            ) {
+            for (_, s) in mem::replace(&mut *ctxt.samplers, HashMap::with_hasher(Default::default())) {
                 s.destroy(&mut ctxt);
             }
 
             // disabling callback
             if ctxt.state.enabled_debug_output != Some(false) {
-                if ctxt.version >= &Version(Api::Gl, 4, 5) || ctxt.extensions.gl_khr_debug {
+                if ctxt.version >= &Version(Api::Gl, 4,5) || ctxt.extensions.gl_khr_debug {
                     ctxt.gl.Disable(gl::DEBUG_OUTPUT);
                 } else if ctxt.extensions.gl_arb_debug_output {
-                    ctxt.gl.DebugMessageCallbackARB(None, ptr::null());
+                    ctxt.gl.DebugMessageCallbackARB(None,
+                                                    ptr::null());
                 }
 
                 ctxt.state.enabled_debug_output = Some(false);
@@ -810,39 +779,34 @@ impl<'a> CapabilitiesSource for CommandContext<'a> {
 }
 
 /// Checks whether the backend supports glium. Returns an `Err` if it doesn't.
-fn check_gl_compatibility(
-    version: &Version,
-    extensions: &ExtensionsList,
-) -> Result<(), IncompatibleOpenGl> {
+fn check_gl_compatibility(version: &Version, extensions: &ExtensionsList)
+    -> Result<(), IncompatibleOpenGl>
+{
     let mut result = Vec::with_capacity(0);
 
-    if !(version >= &Version(Api::Gl, 1, 5))
-        && !(version >= &Version(Api::GlEs, 2, 0))
-        && (!extensions.gl_arb_vertex_buffer_object || !extensions.gl_arb_map_buffer_range)
+    if !(version >= &Version(Api::Gl, 1, 5)) &&
+        !(version >= &Version(Api::GlEs, 2, 0)) &&
+        (!extensions.gl_arb_vertex_buffer_object || !extensions.gl_arb_map_buffer_range)
     {
         result.push("OpenGL implementation doesn't support buffer objects");
     }
 
-    if !(version >= &Version(Api::Gl, 2, 0))
-        && !(version >= &Version(Api::GlEs, 2, 0))
-        && (!extensions.gl_arb_shader_objects
-            || !extensions.gl_arb_vertex_shader
-            || !extensions.gl_arb_fragment_shader)
+    if !(version >= &Version(Api::Gl, 2, 0)) &&
+        !(version >= &Version(Api::GlEs, 2, 0)) &&
+        (!extensions.gl_arb_shader_objects ||
+            !extensions.gl_arb_vertex_shader || !extensions.gl_arb_fragment_shader)
     {
         result.push("OpenGL implementation doesn't support vertex/fragment shaders");
     }
 
-    if !extensions.gl_ext_framebuffer_object
-        && !(version >= &Version(Api::Gl, 3, 0))
-        && !(version >= &Version(Api::GlEs, 2, 0))
-        && !extensions.gl_arb_framebuffer_object
+    if !extensions.gl_ext_framebuffer_object && !(version >= &Version(Api::Gl, 3, 0)) &&
+        !(version >= &Version(Api::GlEs, 2, 0)) && !extensions.gl_arb_framebuffer_object
     {
         result.push("OpenGL implementation doesn't support framebuffers");
     }
 
-    if !extensions.gl_ext_framebuffer_blit
-        && !(version >= &Version(Api::Gl, 3, 0))
-        && !(version >= &Version(Api::GlEs, 2, 0))
+    if !extensions.gl_ext_framebuffer_blit && !(version >= &Version(Api::Gl, 3, 0)) &&
+        !(version >= &Version(Api::GlEs, 2, 0))
     {
         result.push("OpenGL implementation doesn't support blitting framebuffers");
     }
@@ -887,18 +851,13 @@ impl Default for DebugCallbackBehavior {
 }
 
 /// The callback corresponding to `DebugMessageOnError`.
-fn default_debug_callback(
-    _: debug::Source,
-    ty: debug::MessageType,
-    severity: debug::Severity,
-    _: u32,
-    report_debug_output_errors: bool,
-    message: &str,
-) {
+fn default_debug_callback(_: debug::Source, ty: debug::MessageType, severity: debug::Severity,
+                          _: u32, report_debug_output_errors: bool, message: &str)
+{
     match severity {
         debug::Severity::Medium => (),
         debug::Severity::High => (),
-        _ => return,
+        _ => return
     };
 
     match ty {
@@ -910,12 +869,10 @@ fn default_debug_callback(
     };
 
     if report_debug_output_errors {
-        eprint!(
-            "Debug message with high or medium severity: `{}`.\n\
+        eprint!("Debug message with high or medium severity: `{}`.\n\
                  Please report this error: https://github.com/glium/glium/issues\n\
                  Backtrace:",
-            message
-        );
+                 message);
 
         let mut frame_id = 1;
         backtrace::trace(|frame| {
@@ -923,18 +880,14 @@ fn default_debug_callback(
             print!("\n{:>#4} - {:p}", frame_id, ip);
 
             backtrace::resolve(ip, |symbol| {
-                let name = symbol
-                    .name()
-                    .map(|n| n.as_str().unwrap_or("<not-utf8>"))
-                    .unwrap_or("<unknown>");
-                let filename = symbol
-                    .filename()
-                    .map(|p| p.to_str().unwrap_or("<not-utf8>"))
-                    .unwrap_or("<unknown>");
-                let line = symbol
-                    .lineno()
-                    .map(|l| l.to_string())
-                    .unwrap_or_else(|| "??".to_owned());
+                let name = symbol.name()
+                                 .map(|n| n.as_str().unwrap_or("<not-utf8>"))
+                                 .unwrap_or("<unknown>");
+                let filename = symbol.filename()
+                                     .map(|p| p.to_str().unwrap_or("<not-utf8>"))
+                                     .unwrap_or("<unknown>");
+                let line = symbol.lineno().map(|l| l.to_string())
+                                          .unwrap_or_else(|| "??".to_owned());
 
                 print!("\n         {} at {}:{}", name, filename, line);
             });
@@ -948,37 +901,23 @@ fn default_debug_callback(
 }
 
 /// The callback corresponding to `DebugMessageOnError`.
-fn printall_debug_callback(
-    source: debug::Source,
-    ty: debug::MessageType,
-    severity: debug::Severity,
-    id: u32,
-    _: bool,
-    message: &str,
-) {
-    eprintln!(
-        "Source: {src:?}\t\tSeverity: {sev:?}\t\tType: {ty:?}\t\tId: {id}\n{msg}",
-        src = source,
-        sev = severity,
-        ty = ty,
-        id = id,
-        msg = message
-    );
+fn printall_debug_callback(source: debug::Source, ty: debug::MessageType, severity: debug::Severity,
+                           id: u32, _: bool, message: &str)
+{
+    eprintln!("Source: {src:?}\t\tSeverity: {sev:?}\t\tType: {ty:?}\t\tId: {id}\n{msg}",
+               src = source, sev = severity, ty = ty, id = id, msg = message);
 }
 
 /// Initializes `GL_KHR_debug`, `GL_ARB_debug`, or a similar extension so that the debug output
 /// is reported.
 fn init_debug_callback(context: &Rc<Context>, synchronous: bool) {
     // this is the C callback
-    extern "system" fn callback_wrapper(
-        source: gl::types::GLenum,
-        ty: gl::types::GLenum,
-        id: gl::types::GLuint,
-        severity: gl::types::GLenum,
-        _length: gl::types::GLsizei,
-        message: *const gl::types::GLchar,
-        user_param: *mut raw::c_void,
-    ) {
+    extern "system" fn callback_wrapper(source: gl::types::GLenum, ty: gl::types::GLenum,
+                                        id: gl::types::GLuint, severity: gl::types::GLenum,
+                                        _length: gl::types::GLsizei,
+                                        message: *const gl::types::GLchar,
+                                        user_param: *mut raw::c_void)
+    {
         // note that we transmute the user param into a proper context
         // in order to enforce safety here, the context disables debug output and flushes in its
         // destructor
@@ -986,15 +925,16 @@ fn init_debug_callback(context: &Rc<Context>, synchronous: bool) {
         let user_param = user_param as *const Context;
         let user_param: &mut Context = unsafe { mem::transmute(user_param) };
 
-        let message =
-            unsafe { String::from_utf8(CStr::from_ptr(message).to_bytes().to_vec()).unwrap() };
+        let message = unsafe {
+            String::from_utf8(CStr::from_ptr(message).to_bytes().to_vec()).unwrap()
+        };
 
         let severity = match severity {
             gl::DEBUG_SEVERITY_NOTIFICATION => debug::Severity::Notification,
             gl::DEBUG_SEVERITY_LOW => debug::Severity::Low,
             gl::DEBUG_SEVERITY_MEDIUM => debug::Severity::Medium,
             gl::DEBUG_SEVERITY_HIGH => debug::Severity::High,
-            _ => return, // TODO: what to do in this situation?
+            _ => return,        // TODO: what to do in this situation?
         };
 
         let source = match source {
@@ -1004,7 +944,7 @@ fn init_debug_callback(context: &Rc<Context>, synchronous: bool) {
             gl::DEBUG_SOURCE_THIRD_PARTY => debug::Source::ThirdParty,
             gl::DEBUG_SOURCE_APPLICATION => debug::Source::Application,
             gl::DEBUG_SOURCE_OTHER => debug::Source::OtherSource,
-            _ => return, // TODO: what to do in this situation?
+            _ => return,        // TODO: what to do in this situation?
         };
 
         let ty = match ty {
@@ -1017,19 +957,13 @@ fn init_debug_callback(context: &Rc<Context>, synchronous: bool) {
             gl::DEBUG_TYPE_PUSH_GROUP => debug::MessageType::PushGroup,
             gl::DEBUG_TYPE_POP_GROUP => debug::MessageType::PopGroup,
             gl::DEBUG_TYPE_OTHER => debug::MessageType::Other,
-            _ => return, // TODO: what to do in this situation?
+            _ => return,        // TODO: what to do in this situation?
         };
 
         if let Some(callback) = user_param.debug_callback.as_mut() {
             // FIXME: catch_panic here once it's stable
-            callback(
-                source,
-                ty,
-                severity,
-                id,
-                user_param.report_debug_output_errors.get(),
-                &message,
-            );
+            callback(source, ty, severity, id, user_param.report_debug_output_errors.get(),
+                     &message);
         }
     }
 
@@ -1040,62 +974,46 @@ fn init_debug_callback(context: &Rc<Context>, synchronous: bool) {
     unsafe {
         let mut ctxt = context.make_current();
 
-        if ctxt.version >= &Version(Api::Gl, 4, 5)
-            || ctxt.version >= &Version(Api::GlEs, 3, 2)
-            || ctxt.extensions.gl_khr_debug
-            || ctxt.extensions.gl_arb_debug_output
+        if ctxt.version >= &Version(Api::Gl, 4,5) || ctxt.version >= &Version(Api::GlEs, 3, 2) ||
+           ctxt.extensions.gl_khr_debug || ctxt.extensions.gl_arb_debug_output
         {
             if synchronous && !ctxt.state.enabled_debug_output_synchronous {
                 ctxt.gl.Enable(gl::DEBUG_OUTPUT_SYNCHRONOUS);
                 ctxt.state.enabled_debug_output_synchronous = true;
             }
 
-            if ctxt.version >= &Version(Api::Gl, 4, 5)
-                || ctxt.version >= &Version(Api::GlEs, 3, 2)
-                || (ctxt.version >= &Version(Api::Gl, 1, 0) && ctxt.extensions.gl_khr_debug)
+            if ctxt.version >= &Version(Api::Gl, 4, 5) ||
+               ctxt.version >= &Version(Api::GlEs, 3, 2) ||
+               (ctxt.version >= &Version(Api::Gl, 1, 0) && ctxt.extensions.gl_khr_debug)
             {
-                ctxt.gl
-                    .DebugMessageCallback(Some(callback_wrapper), context_raw_ptr.0 as *const _);
-                ctxt.gl.DebugMessageControl(
-                    gl::DONT_CARE,
-                    gl::DONT_CARE,
-                    gl::DONT_CARE,
-                    0,
-                    ptr::null(),
-                    gl::TRUE,
-                );
+                ctxt.gl.DebugMessageCallback(Some(callback_wrapper), context_raw_ptr.0
+                                                                     as *const _);
+                ctxt.gl.DebugMessageControl(gl::DONT_CARE, gl::DONT_CARE, gl::DONT_CARE, 0,
+                                            ptr::null(), gl::TRUE);
 
                 if ctxt.state.enabled_debug_output != Some(true) {
                     ctxt.gl.Enable(gl::DEBUG_OUTPUT);
                     ctxt.state.enabled_debug_output = Some(true);
                 }
-            } else if ctxt.version >= &Version(Api::GlEs, 2, 0) && ctxt.extensions.gl_khr_debug {
-                ctxt.gl
-                    .DebugMessageCallbackKHR(Some(callback_wrapper), context_raw_ptr.0 as *const _);
-                ctxt.gl.DebugMessageControlKHR(
-                    gl::DONT_CARE,
-                    gl::DONT_CARE,
-                    gl::DONT_CARE,
-                    0,
-                    ptr::null(),
-                    gl::TRUE,
-                );
+
+            } else if ctxt.version >= &Version(Api::GlEs, 2, 0) &&
+                      ctxt.extensions.gl_khr_debug
+            {
+                ctxt.gl.DebugMessageCallbackKHR(Some(callback_wrapper), context_raw_ptr.0
+                                                                        as *const _);
+                ctxt.gl.DebugMessageControlKHR(gl::DONT_CARE, gl::DONT_CARE, gl::DONT_CARE, 0,
+                                               ptr::null(), gl::TRUE);
 
                 if ctxt.state.enabled_debug_output != Some(true) {
                     ctxt.gl.Enable(gl::DEBUG_OUTPUT);
                     ctxt.state.enabled_debug_output = Some(true);
                 }
+
             } else {
-                ctxt.gl
-                    .DebugMessageCallbackARB(Some(callback_wrapper), context_raw_ptr.0 as *const _);
-                ctxt.gl.DebugMessageControlARB(
-                    gl::DONT_CARE,
-                    gl::DONT_CARE,
-                    gl::DONT_CARE,
-                    0,
-                    ptr::null(),
-                    gl::TRUE,
-                );
+                ctxt.gl.DebugMessageCallbackARB(Some(callback_wrapper), context_raw_ptr.0
+                                                                        as *const _);
+                ctxt.gl.DebugMessageControlARB(gl::DONT_CARE, gl::DONT_CARE, gl::DONT_CARE,
+                                               0, ptr::null(), gl::TRUE);
 
                 ctxt.state.enabled_debug_output = Some(true);
             }
diff --git a/src/uniforms/value.rs b/src/uniforms/value.rs
index cc394be..173f9f0 100644
--- a/src/uniforms/value.rs
+++ b/src/uniforms/value.rs
@@ -5,11 +5,12 @@ use crate::texture;
 
 use crate::uniforms::AsUniformValue;
 use crate::uniforms::LayoutMismatchError;
-use crate::uniforms::SamplerBehavior;
 use crate::uniforms::UniformBlock;
+use crate::uniforms::SamplerBehavior;
 
-use crate::buffer::BufferAnySlice;
 use crate::uniforms::ImageUnitBehavior;
+use crate::buffer::BufferAnySlice;
+
 
 /// Type of a uniform in a program.
 #[allow(missing_docs)]
@@ -145,10 +146,7 @@ pub enum UniformValue<'a> {
     /// can be bound on a block with the given layout.
     /// The last parameter is a sender which must be used to send a `SyncFence` that expires when
     /// the buffer has finished being used.
-    Block(
-        BufferAnySlice<'a>,
-        fn(&program::UniformBlock) -> Result<(), LayoutMismatchError>,
-    ),
+    Block(BufferAnySlice<'a>, fn(&program::UniformBlock) -> Result<(), LayoutMismatchError>),
     Subroutine(ShaderStage, &'a str),
     SignedInt(i32),
     UnsignedInt(u32),
@@ -176,9 +174,9 @@ pub enum UniformValue<'a> {
     DoubleVec2([f64; 2]),
     DoubleVec3([f64; 3]),
     DoubleVec4([f64; 4]),
-    DoubleMat2([[f64; 2]; 2]),
-    DoubleMat3([[f64; 3]; 3]),
-    DoubleMat4([[f64; 4]; 4]),
+    DoubleMat2([[f64;2]; 2]),
+    DoubleMat3([[f64;3]; 3]),
+    DoubleMat4([[f64;4]; 4]),
     Int64(i64),
     Int64Vec2([i64; 2]),
     Int64Vec3([i64; 3]),
@@ -190,96 +188,48 @@ pub enum UniformValue<'a> {
     Texture1d(&'a texture::Texture1d, Option<SamplerBehavior>),
     CompressedTexture1d(&'a texture::CompressedTexture1d, Option<SamplerBehavior>),
     SrgbTexture1d(&'a texture::SrgbTexture1d, Option<SamplerBehavior>),
-    CompressedSrgbTexture1d(
-        &'a texture::CompressedSrgbTexture1d,
-        Option<SamplerBehavior>,
-    ),
+    CompressedSrgbTexture1d(&'a texture::CompressedSrgbTexture1d, Option<SamplerBehavior>),
     IntegralTexture1d(&'a texture::IntegralTexture1d, Option<SamplerBehavior>),
     UnsignedTexture1d(&'a texture::UnsignedTexture1d, Option<SamplerBehavior>),
     DepthTexture1d(&'a texture::DepthTexture1d, Option<SamplerBehavior>),
     Texture2d(&'a texture::Texture2d, Option<SamplerBehavior>),
     CompressedTexture2d(&'a texture::CompressedTexture2d, Option<SamplerBehavior>),
     SrgbTexture2d(&'a texture::SrgbTexture2d, Option<SamplerBehavior>),
-    CompressedSrgbTexture2d(
-        &'a texture::CompressedSrgbTexture2d,
-        Option<SamplerBehavior>,
-    ),
+    CompressedSrgbTexture2d(&'a texture::CompressedSrgbTexture2d, Option<SamplerBehavior>),
     IntegralTexture2d(&'a texture::IntegralTexture2d, Option<SamplerBehavior>),
     UnsignedTexture2d(&'a texture::UnsignedTexture2d, Option<SamplerBehavior>),
     DepthTexture2d(&'a texture::DepthTexture2d, Option<SamplerBehavior>),
     Texture2dMultisample(&'a texture::Texture2dMultisample, Option<SamplerBehavior>),
-    SrgbTexture2dMultisample(
-        &'a texture::SrgbTexture2dMultisample,
-        Option<SamplerBehavior>,
-    ),
-    IntegralTexture2dMultisample(
-        &'a texture::IntegralTexture2dMultisample,
-        Option<SamplerBehavior>,
-    ),
-    UnsignedTexture2dMultisample(
-        &'a texture::UnsignedTexture2dMultisample,
-        Option<SamplerBehavior>,
-    ),
-    DepthTexture2dMultisample(
-        &'a texture::DepthTexture2dMultisample,
-        Option<SamplerBehavior>,
-    ),
+    SrgbTexture2dMultisample(&'a texture::SrgbTexture2dMultisample, Option<SamplerBehavior>),
+    IntegralTexture2dMultisample(&'a texture::IntegralTexture2dMultisample, Option<SamplerBehavior>),
+    UnsignedTexture2dMultisample(&'a texture::UnsignedTexture2dMultisample, Option<SamplerBehavior>),
+    DepthTexture2dMultisample(&'a texture::DepthTexture2dMultisample, Option<SamplerBehavior>),
     Texture3d(&'a texture::Texture3d, Option<SamplerBehavior>),
     CompressedTexture3d(&'a texture::CompressedTexture3d, Option<SamplerBehavior>),
     SrgbTexture3d(&'a texture::SrgbTexture3d, Option<SamplerBehavior>),
-    CompressedSrgbTexture3d(
-        &'a texture::CompressedSrgbTexture3d,
-        Option<SamplerBehavior>,
-    ),
+    CompressedSrgbTexture3d(&'a texture::CompressedSrgbTexture3d, Option<SamplerBehavior>),
     IntegralTexture3d(&'a texture::IntegralTexture3d, Option<SamplerBehavior>),
     UnsignedTexture3d(&'a texture::UnsignedTexture3d, Option<SamplerBehavior>),
     DepthTexture3d(&'a texture::DepthTexture3d, Option<SamplerBehavior>),
     Texture1dArray(&'a texture::Texture1dArray, Option<SamplerBehavior>),
-    CompressedTexture1dArray(
-        &'a texture::CompressedTexture1dArray,
-        Option<SamplerBehavior>,
-    ),
+    CompressedTexture1dArray(&'a texture::CompressedTexture1dArray, Option<SamplerBehavior>),
     SrgbTexture1dArray(&'a texture::SrgbTexture1dArray, Option<SamplerBehavior>),
-    CompressedSrgbTexture1dArray(
-        &'a texture::CompressedSrgbTexture1dArray,
-        Option<SamplerBehavior>,
-    ),
+    CompressedSrgbTexture1dArray(&'a texture::CompressedSrgbTexture1dArray, Option<SamplerBehavior>),
     IntegralTexture1dArray(&'a texture::IntegralTexture1dArray, Option<SamplerBehavior>),
     UnsignedTexture1dArray(&'a texture::UnsignedTexture1dArray, Option<SamplerBehavior>),
     DepthTexture1dArray(&'a texture::DepthTexture1dArray, Option<SamplerBehavior>),
     Texture2dArray(&'a texture::Texture2dArray, Option<SamplerBehavior>),
-    CompressedTexture2dArray(
-        &'a texture::CompressedTexture2dArray,
-        Option<SamplerBehavior>,
-    ),
+    CompressedTexture2dArray(&'a texture::CompressedTexture2dArray, Option<SamplerBehavior>),
     SrgbTexture2dArray(&'a texture::SrgbTexture2dArray, Option<SamplerBehavior>),
-    CompressedSrgbTexture2dArray(
-        &'a texture::CompressedSrgbTexture2dArray,
-        Option<SamplerBehavior>,
-    ),
+    CompressedSrgbTexture2dArray(&'a texture::CompressedSrgbTexture2dArray, Option<SamplerBehavior>),
     IntegralTexture2dArray(&'a texture::IntegralTexture2dArray, Option<SamplerBehavior>),
     UnsignedTexture2dArray(&'a texture::UnsignedTexture2dArray, Option<SamplerBehavior>),
     DepthTexture2dArray(&'a texture::DepthTexture2dArray, Option<SamplerBehavior>),
-    Texture2dMultisampleArray(
-        &'a texture::Texture2dMultisampleArray,
-        Option<SamplerBehavior>,
-    ),
-    SrgbTexture2dMultisampleArray(
-        &'a texture::SrgbTexture2dMultisampleArray,
-        Option<SamplerBehavior>,
-    ),
-    IntegralTexture2dMultisampleArray(
-        &'a texture::IntegralTexture2dMultisampleArray,
-        Option<SamplerBehavior>,
-    ),
-    UnsignedTexture2dMultisampleArray(
-        &'a texture::UnsignedTexture2dMultisampleArray,
-        Option<SamplerBehavior>,
-    ),
-    DepthTexture2dMultisampleArray(
-        &'a texture::DepthTexture2dMultisampleArray,
-        Option<SamplerBehavior>,
-    ),
+    Texture2dMultisampleArray(&'a texture::Texture2dMultisampleArray, Option<SamplerBehavior>),
+    SrgbTexture2dMultisampleArray(&'a texture::SrgbTexture2dMultisampleArray, Option<SamplerBehavior>),
+    IntegralTexture2dMultisampleArray(&'a texture::IntegralTexture2dMultisampleArray, Option<SamplerBehavior>),
+    UnsignedTexture2dMultisampleArray(&'a texture::UnsignedTexture2dMultisampleArray, Option<SamplerBehavior>),
+    DepthTexture2dMultisampleArray(&'a texture::DepthTexture2dMultisampleArray, Option<SamplerBehavior>),
     Cubemap(&'a texture::Cubemap, Option<SamplerBehavior>),
     CompressedCubemap(&'a texture::CompressedCubemap, Option<SamplerBehavior>),
     SrgbCubemap(&'a texture::SrgbCubemap, Option<SamplerBehavior>),
@@ -290,10 +240,7 @@ pub enum UniformValue<'a> {
     CubemapArray(&'a texture::CubemapArray, Option<SamplerBehavior>),
     CompressedCubemapArray(&'a texture::CompressedCubemapArray, Option<SamplerBehavior>),
     SrgbCubemapArray(&'a texture::SrgbCubemapArray, Option<SamplerBehavior>),
-    CompressedSrgbCubemapArray(
-        &'a texture::CompressedSrgbCubemapArray,
-        Option<SamplerBehavior>,
-    ),
+    CompressedSrgbCubemapArray(&'a texture::CompressedSrgbCubemapArray, Option<SamplerBehavior>),
     IntegralCubemapArray(&'a texture::IntegralCubemapArray, Option<SamplerBehavior>),
     UnsignedCubemapArray(&'a texture::UnsignedCubemapArray, Option<SamplerBehavior>),
     DepthCubemapArray(&'a texture::DepthCubemapArray, Option<SamplerBehavior>),
@@ -309,23 +256,11 @@ pub enum UniformValue<'a> {
     IntegralImage3d(&'a texture::IntegralTexture3d, Option<ImageUnitBehavior>),
     UnsignedImage3d(&'a texture::UnsignedTexture3d, Option<ImageUnitBehavior>),
     Image1dArray(&'a texture::Texture1dArray, Option<ImageUnitBehavior>),
-    IntegralImage1dArray(
-        &'a texture::IntegralTexture1dArray,
-        Option<ImageUnitBehavior>,
-    ),
-    UnsignedImage1dArray(
-        &'a texture::UnsignedTexture1dArray,
-        Option<ImageUnitBehavior>,
-    ),
+    IntegralImage1dArray(&'a texture::IntegralTexture1dArray, Option<ImageUnitBehavior>),
+    UnsignedImage1dArray(&'a texture::UnsignedTexture1dArray, Option<ImageUnitBehavior>),
     Image2dArray(&'a texture::Texture2dArray, Option<ImageUnitBehavior>),
-    IntegralImage2dArray(
-        &'a texture::IntegralTexture2dArray,
-        Option<ImageUnitBehavior>,
-    ),
-    UnsignedImage2dArray(
-        &'a texture::UnsignedTexture2dArray,
-        Option<ImageUnitBehavior>,
-    ),
+    IntegralImage2dArray(&'a texture::IntegralTexture2dArray, Option<ImageUnitBehavior>),
+    UnsignedImage2dArray(&'a texture::UnsignedTexture2dArray, Option<ImageUnitBehavior>),
     ImageCube(&'a texture::Cubemap, Option<ImageUnitBehavior>),
     IntegralImageCube(&'a texture::IntegralCubemap, Option<ImageUnitBehavior>),
     UnsignedImageCube(&'a texture::UnsignedCubemap, Option<ImageUnitBehavior>),
@@ -397,9 +332,7 @@ impl<'a> UniformValue<'a> {
             (&UniformValue::Texture1dArray(_, _), UniformType::Sampler1dArray) => true,
             (&UniformValue::CompressedTexture1dArray(_, _), UniformType::Sampler1dArray) => true,
             (&UniformValue::SrgbTexture1dArray(_, _), UniformType::Sampler1dArray) => true,
-            (&UniformValue::CompressedSrgbTexture1dArray(_, _), UniformType::Sampler1dArray) => {
-                true
-            }
+            (&UniformValue::CompressedSrgbTexture1dArray(_, _), UniformType::Sampler1dArray) => true,
             (&UniformValue::IntegralTexture1dArray(_, _), UniformType::ISampler1dArray) => true,
             (&UniformValue::UnsignedTexture1dArray(_, _), UniformType::USampler1dArray) => true,
             (&UniformValue::DepthTexture1dArray(_, _), UniformType::Sampler1dArray) => true,
@@ -407,9 +340,7 @@ impl<'a> UniformValue<'a> {
             (&UniformValue::Texture2dArray(_, _), UniformType::Sampler2dArray) => true,
             (&UniformValue::CompressedTexture2dArray(_, _), UniformType::Sampler2dArray) => true,
             (&UniformValue::SrgbTexture2dArray(_, _), UniformType::Sampler2dArray) => true,
-            (&UniformValue::CompressedSrgbTexture2dArray(_, _), UniformType::Sampler2dArray) => {
-                true
-            }
+            (&UniformValue::CompressedSrgbTexture2dArray(_, _), UniformType::Sampler2dArray) => true,
             (&UniformValue::IntegralTexture2dArray(_, _), UniformType::ISampler2dArray) => true,
             (&UniformValue::UnsignedTexture2dArray(_, _), UniformType::USampler2dArray) => true,
             (&UniformValue::DepthTexture2dArray(_, _), UniformType::Sampler2dArray) => true,
@@ -425,37 +356,25 @@ impl<'a> UniformValue<'a> {
             (&UniformValue::CubemapArray(_, _), UniformType::SamplerCubeArray) => true,
             (&UniformValue::CompressedCubemapArray(_, _), UniformType::SamplerCubeArray) => true,
             (&UniformValue::SrgbCubemapArray(_, _), UniformType::SamplerCubeArray) => true,
-            (&UniformValue::CompressedSrgbCubemapArray(_, _), UniformType::SamplerCubeArray) => {
-                true
-            }
+            (&UniformValue::CompressedSrgbCubemapArray(_, _), UniformType::SamplerCubeArray) => true,
             (&UniformValue::IntegralCubemapArray(_, _), UniformType::ISamplerCubeArray) => true,
             (&UniformValue::UnsignedCubemapArray(_, _), UniformType::USamplerCubeArray) => true,
             (&UniformValue::DepthCubemapArray(_, _), UniformType::SamplerCubeArray) => true,
             (&UniformValue::DepthCubemapArray(_, _), UniformType::SamplerCubeArrayShadow) => true,
             (&UniformValue::BufferTexture(tex), UniformType::SamplerBuffer) => {
                 tex.get_texture_type() == texture::buffer_texture::BufferTextureType::Float
-            }
+            },
             (&UniformValue::BufferTexture(tex), UniformType::ISamplerBuffer) => {
                 tex.get_texture_type() == texture::buffer_texture::BufferTextureType::Integral
-            }
+            },
             (&UniformValue::BufferTexture(tex), UniformType::USamplerBuffer) => {
                 tex.get_texture_type() == texture::buffer_texture::BufferTextureType::Unsigned
-            }
+            },
             (&UniformValue::Texture2dMultisample(..), UniformType::Sampler2dMultisample) => true,
-            (&UniformValue::SrgbTexture2dMultisample(..), UniformType::Sampler2dMultisample) => {
-                true
-            }
-            (
-                &UniformValue::IntegralTexture2dMultisample(..),
-                UniformType::ISampler2dMultisample,
-            ) => true,
-            (
-                &UniformValue::UnsignedTexture2dMultisample(..),
-                UniformType::USampler2dMultisample,
-            ) => true,
-            (&UniformValue::DepthTexture2dMultisample(..), UniformType::Sampler2dMultisample) => {
-                true
-            }
+            (&UniformValue::SrgbTexture2dMultisample(..), UniformType::Sampler2dMultisample) => true,
+            (&UniformValue::IntegralTexture2dMultisample(..), UniformType::ISampler2dMultisample) => true,
+            (&UniformValue::UnsignedTexture2dMultisample(..), UniformType::USampler2dMultisample) => true,
+            (&UniformValue::DepthTexture2dMultisample(..), UniformType::Sampler2dMultisample) => true,
             (&UniformValue::Image1d(..), UniformType::Image1d) => true,
             (&UniformValue::IntegralImage1d(..), UniformType::IImage1d) => true,
             (&UniformValue::UnsignedImage1d(..), UniformType::UImage1d) => true,
@@ -483,17 +402,12 @@ impl<'a> UniformValue<'a> {
 }
 
 macro_rules! impl_uniform_block_basic {
-    ($ty:ty, $uniform_ty:expr) => {
+    ($ty:ty, $uniform_ty:expr) => (
         impl UniformBlock for $ty {
-            fn matches(
-                layout: &program::BlockLayout,
-                base_offset: usize,
-            ) -> Result<(), LayoutMismatchError> {
-                if let &BlockLayout::BasicType {
-                    ty,
-                    offset_in_buffer,
-                } = layout
-                {
+            fn matches(layout: &program::BlockLayout, base_offset: usize)
+                       -> Result<(), LayoutMismatchError>
+            {
+                if let &BlockLayout::BasicType { ty, offset_in_buffer } = layout {
                     if ty != $uniform_ty {
                         return Err(LayoutMismatchError::TypeMismatch {
                             expected: ty,
@@ -509,13 +423,14 @@ macro_rules! impl_uniform_block_basic {
                     }
 
                     Ok(())
+
                 } else {
                     Err(LayoutMismatchError::LayoutMismatch {
                         expected: layout.clone(),
                         obtained: BlockLayout::BasicType {
                             ty: $uniform_ty,
                             offset_in_buffer: base_offset,
-                        },
+                        }
                     })
                 }
             }
@@ -528,7 +443,7 @@ macro_rules! impl_uniform_block_basic {
                 }
             }
         }
-    };
+    );
 }
 
 impl AsUniformValue for i8 {
